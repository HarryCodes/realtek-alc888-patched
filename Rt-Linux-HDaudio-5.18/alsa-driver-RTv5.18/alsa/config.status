#! /bin/bash
# Generated by configure.
# Run this file to recreate the current configuration.
# Compiler output produced by configure, useful for debugging
# configure, is in config.log if it exists.

debug=false
ac_cs_recheck=false
ac_cs_silent=false

SHELL=${CONFIG_SHELL-/bin/bash}
export SHELL
## -------------------- ##
## M4sh Initialization. ##
## -------------------- ##

# Be more Bourne compatible
DUALCASE=1; export DUALCASE # for MKS sh
if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then :
  emulate sh
  NULLCMD=:
  # Pre-4.2 versions of Zsh do word splitting on ${1+"$@"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '${1+"$@"}'='"$@"'
  setopt NO_GLOB_SUBST
else
  case `(set -o) 2>/dev/null` in #(
  *posix*) :
    set -o posix ;; #(
  *) :
     ;;
esac
fi


as_nl='
'
export as_nl
# Printing a long string crashes Solaris 7 /usr/bin/printf.
as_echo='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
as_echo=$as_echo$as_echo$as_echo$as_echo$as_echo
as_echo=$as_echo$as_echo$as_echo$as_echo$as_echo$as_echo
# Prefer a ksh shell builtin over an external printf program on Solaris,
# but without wasting forks for bash or zsh.
if test -z "$BASH_VERSION$ZSH_VERSION" \
    && (test "X`print -r -- $as_echo`" = "X$as_echo") 2>/dev/null; then
  as_echo='print -r --'
  as_echo_n='print -rn --'
elif (test "X`printf %s $as_echo`" = "X$as_echo") 2>/dev/null; then
  as_echo='printf %s\n'
  as_echo_n='printf %s'
else
  if test "X`(/usr/ucb/echo -n -n $as_echo) 2>/dev/null`" = "X-n $as_echo"; then
    as_echo_body='eval /usr/ucb/echo -n "$1$as_nl"'
    as_echo_n='/usr/ucb/echo -n'
  else
    as_echo_body='eval expr "X$1" : "X\\(.*\\)"'
    as_echo_n_body='eval
      arg=$1;
      case $arg in #(
      *"$as_nl"*)
	expr "X$arg" : "X\\(.*\\)$as_nl";
	arg=`expr "X$arg" : ".*$as_nl\\(.*\\)"`;;
      esac;
      expr "X$arg" : "X\\(.*\\)" | tr -d "$as_nl"
    '
    export as_echo_n_body
    as_echo_n='sh -c $as_echo_n_body as_echo'
  fi
  export as_echo_body
  as_echo='sh -c $as_echo_body as_echo'
fi

# The user is always right.
if test "${PATH_SEPARATOR+set}" != set; then
  PATH_SEPARATOR=:
  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 && {
    (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 ||
      PATH_SEPARATOR=';'
  }
fi


# IFS
# We need space, tab and new line, in precisely that order.  Quoting is
# there to prevent editors from complaining about space-tab.
# (If _AS_PATH_WALK were called with IFS unset, it would disable word
# splitting by setting IFS to empty value.)
IFS=" ""	$as_nl"

# Find who we are.  Look in the path if we contain no directory separator.
as_myself=
case $0 in #((
  *[\\/]* ) as_myself=$0 ;;
  *) as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    test -r "$as_dir/$0" && as_myself=$as_dir/$0 && break
  done
IFS=$as_save_IFS

     ;;
esac
# We did not find ourselves, most probably we were run as `sh COMMAND'
# in which case we are not to be found in the path.
if test "x$as_myself" = x; then
  as_myself=$0
fi
if test ! -f "$as_myself"; then
  $as_echo "$as_myself: error: cannot find myself; rerun with an absolute file name" >&2
  exit 1
fi

# Unset variables that we do not need and which cause bugs (e.g. in
# pre-3.0 UWIN ksh).  But do not cause bugs in bash 2.01; the "|| exit 1"
# suppresses any "Segmentation fault" message there.  '((' could
# trigger a bug in pdksh 5.2.14.
for as_var in BASH_ENV ENV MAIL MAILPATH
do eval test x\${$as_var+set} = xset \
  && ( (unset $as_var) || exit 1) >/dev/null 2>&1 && unset $as_var || :
done
PS1='$ '
PS2='> '
PS4='+ '

# NLS nuisances.
LC_ALL=C
export LC_ALL
LANGUAGE=C
export LANGUAGE

# CDPATH.
(unset CDPATH) >/dev/null 2>&1 && unset CDPATH


# as_fn_error STATUS ERROR [LINENO LOG_FD]
# ----------------------------------------
# Output "`basename $0`: error: ERROR" to stderr. If LINENO and LOG_FD are
# provided, also output the error to LOG_FD, referencing LINENO. Then exit the
# script with STATUS, using 1 if that was 0.
as_fn_error ()
{
  as_status=$1; test $as_status -eq 0 && as_status=1
  if test "$4"; then
    as_lineno=${as_lineno-"$3"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
    $as_echo "$as_me:${as_lineno-$LINENO}: error: $2" >&$4
  fi
  $as_echo "$as_me: error: $2" >&2
  as_fn_exit $as_status
} # as_fn_error


# as_fn_set_status STATUS
# -----------------------
# Set $? to STATUS, without forking.
as_fn_set_status ()
{
  return $1
} # as_fn_set_status

# as_fn_exit STATUS
# -----------------
# Exit the shell with STATUS, even in a "trap 0" or "set -e" context.
as_fn_exit ()
{
  set +e
  as_fn_set_status $1
  exit $1
} # as_fn_exit

# as_fn_unset VAR
# ---------------
# Portably unset VAR.
as_fn_unset ()
{
  { eval $1=; unset $1;}
}
as_unset=as_fn_unset
# as_fn_append VAR VALUE
# ----------------------
# Append the text in VALUE to the end of the definition contained in VAR. Take
# advantage of any shell optimizations that allow amortized linear growth over
# repeated appends, instead of the typical quadratic growth present in naive
# implementations.
if (eval "as_var=1; as_var+=2; test x\$as_var = x12") 2>/dev/null; then :
  eval 'as_fn_append ()
  {
    eval $1+=\$2
  }'
else
  as_fn_append ()
  {
    eval $1=\$$1\$2
  }
fi # as_fn_append

# as_fn_arith ARG...
# ------------------
# Perform arithmetic evaluation on the ARGs, and store the result in the
# global $as_val. Take advantage of shells that can avoid forks. The arguments
# must be portable across $(()) and expr.
if (eval "test \$(( 1 + 1 )) = 2") 2>/dev/null; then :
  eval 'as_fn_arith ()
  {
    as_val=$(( $* ))
  }'
else
  as_fn_arith ()
  {
    as_val=`expr "$@" || test $? -eq 1`
  }
fi # as_fn_arith


if expr a : '\(a\)' >/dev/null 2>&1 &&
   test "X`expr 00001 : '.*\(...\)'`" = X001; then
  as_expr=expr
else
  as_expr=false
fi

if (basename -- /) >/dev/null 2>&1 && test "X`basename -- / 2>&1`" = "X/"; then
  as_basename=basename
else
  as_basename=false
fi

if (as_dir=`dirname -- /` && test "X$as_dir" = X/) >/dev/null 2>&1; then
  as_dirname=dirname
else
  as_dirname=false
fi

as_me=`$as_basename -- "$0" ||
$as_expr X/"$0" : '.*/\([^/][^/]*\)/*$' \| \
	 X"$0" : 'X\(//\)$' \| \
	 X"$0" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X/"$0" |
    sed '/^.*\/\([^/][^/]*\)\/*$/{
	    s//\1/
	    q
	  }
	  /^X\/\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\/\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`

# Avoid depending upon Character Ranges.
as_cr_letters='abcdefghijklmnopqrstuvwxyz'
as_cr_LETTERS='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
as_cr_Letters=$as_cr_letters$as_cr_LETTERS
as_cr_digits='0123456789'
as_cr_alnum=$as_cr_Letters$as_cr_digits

ECHO_C= ECHO_N= ECHO_T=
case `echo -n x` in #(((((
-n*)
  case `echo 'xy\c'` in
  *c*) ECHO_T='	';;	# ECHO_T is single tab character.
  xy)  ECHO_C='\c';;
  *)   echo `echo ksh88 bug on AIX 6.1` > /dev/null
       ECHO_T='	';;
  esac;;
*)
  ECHO_N='-n';;
esac

rm -f conf$$ conf$$.exe conf$$.file
if test -d conf$$.dir; then
  rm -f conf$$.dir/conf$$.file
else
  rm -f conf$$.dir
  mkdir conf$$.dir 2>/dev/null
fi
if (echo >conf$$.file) 2>/dev/null; then
  if ln -s conf$$.file conf$$ 2>/dev/null; then
    as_ln_s='ln -s'
    # ... but there are two gotchas:
    # 1) On MSYS, both `ln -s file dir' and `ln file dir' fail.
    # 2) DJGPP < 2.04 has no symlinks; `ln -s' creates a wrapper executable.
    # In both cases, we have to default to `cp -p'.
    ln -s conf$$.file conf$$.dir 2>/dev/null && test ! -f conf$$.exe ||
      as_ln_s='cp -p'
  elif ln conf$$.file conf$$ 2>/dev/null; then
    as_ln_s=ln
  else
    as_ln_s='cp -p'
  fi
else
  as_ln_s='cp -p'
fi
rm -f conf$$ conf$$.exe conf$$.dir/conf$$.file conf$$.file
rmdir conf$$.dir 2>/dev/null


# as_fn_mkdir_p
# -------------
# Create "$as_dir" as a directory, including parents if necessary.
as_fn_mkdir_p ()
{

  case $as_dir in #(
  -*) as_dir=./$as_dir;;
  esac
  test -d "$as_dir" || eval $as_mkdir_p || {
    as_dirs=
    while :; do
      case $as_dir in #(
      *\'*) as_qdir=`$as_echo "$as_dir" | sed "s/'/'\\\\\\\\''/g"`;; #'(
      *) as_qdir=$as_dir;;
      esac
      as_dirs="'$as_qdir' $as_dirs"
      as_dir=`$as_dirname -- "$as_dir" ||
$as_expr X"$as_dir" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
	 X"$as_dir" : 'X\(//\)[^/]' \| \
	 X"$as_dir" : 'X\(//\)$' \| \
	 X"$as_dir" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X"$as_dir" |
    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)[^/].*/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`
      test -d "$as_dir" && break
    done
    test -z "$as_dirs" || eval "mkdir $as_dirs"
  } || test -d "$as_dir" || as_fn_error $? "cannot create directory $as_dir"


} # as_fn_mkdir_p
if mkdir -p . 2>/dev/null; then
  as_mkdir_p='mkdir -p "$as_dir"'
else
  test -d ./-p && rmdir ./-p
  as_mkdir_p=false
fi

if test -x / >/dev/null 2>&1; then
  as_test_x='test -x'
else
  if ls -dL / >/dev/null 2>&1; then
    as_ls_L_option=L
  else
    as_ls_L_option=
  fi
  as_test_x='
    eval sh -c '\''
      if test -d "$1"; then
	test -d "$1/.";
      else
	case $1 in #(
	-*)set "./$1";;
	esac;
	case `ls -ld'$as_ls_L_option' "$1" 2>/dev/null` in #((
	???[sx]*):;;*)false;;esac;fi
    '\'' sh
  '
fi
as_executable_p=$as_test_x

# Sed expression to map a string onto a valid CPP name.
as_tr_cpp="eval sed 'y%*$as_cr_letters%P$as_cr_LETTERS%;s%[^_$as_cr_alnum]%_%g'"

# Sed expression to map a string onto a valid variable name.
as_tr_sh="eval sed 'y%*+%pp%;s%[^_$as_cr_alnum]%_%g'"


exec 6>&1
## ----------------------------------- ##
## Main body of $CONFIG_STATUS script. ##
## ----------------------------------- ##
# Save the log message, to keep $0 and so on meaningful, and to
# report actual input values of CONFIG_FILES etc. instead of their
# values after options handling.
ac_log="
This file was extended by $as_me, which was
generated by GNU Autoconf 2.68.  Invocation command line was

  CONFIG_FILES    = $CONFIG_FILES
  CONFIG_HEADERS  = $CONFIG_HEADERS
  CONFIG_LINKS    = $CONFIG_LINKS
  CONFIG_COMMANDS = $CONFIG_COMMANDS
  $ $0 $@

on `(hostname || uname -n) 2>/dev/null | sed 1q`
"

# Files that config.status was made for.
config_files=" version Makefile.conf snddevices utils/alsa-driver.spec utils/buildrpm toplevel.config utils/alsasound utils/alsasound.posix include/pci_ids_compat.h include/i2c-id_compat.h"
config_headers=" include/config.h include/config1.h include/version.h include/autoconf-extra.h include/alsa-kconfig.h"

ac_cs_usage="\
\`$as_me' instantiates files and other configuration actions
from templates according to the current configuration.  Unless the files
and actions are specified as TAGs, all are instantiated by default.

Usage: $0 [OPTION]... [TAG]...

  -h, --help       print this help, then exit
  -V, --version    print version number and configuration settings, then exit
      --config     print configuration, then exit
  -q, --quiet, --silent
                   do not print progress messages
  -d, --debug      don't remove temporary files
      --recheck    update $as_me by reconfiguring in the same conditions
      --file=FILE[:TEMPLATE]
                   instantiate the configuration file FILE
      --header=FILE[:TEMPLATE]
                   instantiate the configuration header FILE

Configuration files:
$config_files

Configuration headers:
$config_headers

Report bugs to the package provider."

ac_cs_config="'--with-cards=hda-intel'"
ac_cs_version="\
config.status
configured by ./configure, generated by GNU Autoconf 2.68,
  with options \"$ac_cs_config\"

Copyright (C) 2010 Free Software Foundation, Inc.
This config.status script is free software; the Free Software Foundation
gives unlimited permission to copy, distribute and modify it."

ac_pwd='/home/harrison/gits/realtek-alc888-patched/Rt-Linux-HDaudio-5.18/alsa-driver-RTv5.18/alsa'
srcdir='.'
INSTALL='/usr/bin/install -c'
test -n "$AWK" || AWK=awk
# The default lists apply if the user does not specify any file.
ac_need_defaults=:
while test $# != 0
do
  case $1 in
  --*=?*)
    ac_option=`expr "X$1" : 'X\([^=]*\)='`
    ac_optarg=`expr "X$1" : 'X[^=]*=\(.*\)'`
    ac_shift=:
    ;;
  --*=)
    ac_option=`expr "X$1" : 'X\([^=]*\)='`
    ac_optarg=
    ac_shift=:
    ;;
  *)
    ac_option=$1
    ac_optarg=$2
    ac_shift=shift
    ;;
  esac

  case $ac_option in
  # Handling of the options.
  -recheck | --recheck | --rechec | --reche | --rech | --rec | --re | --r)
    ac_cs_recheck=: ;;
  --version | --versio | --versi | --vers | --ver | --ve | --v | -V )
    $as_echo "$ac_cs_version"; exit ;;
  --config | --confi | --conf | --con | --co | --c )
    $as_echo "$ac_cs_config"; exit ;;
  --debug | --debu | --deb | --de | --d | -d )
    debug=: ;;
  --file | --fil | --fi | --f )
    $ac_shift
    case $ac_optarg in
    *\'*) ac_optarg=`$as_echo "$ac_optarg" | sed "s/'/'\\\\\\\\''/g"` ;;
    '') as_fn_error $? "missing file argument" ;;
    esac
    as_fn_append CONFIG_FILES " '$ac_optarg'"
    ac_need_defaults=false;;
  --header | --heade | --head | --hea )
    $ac_shift
    case $ac_optarg in
    *\'*) ac_optarg=`$as_echo "$ac_optarg" | sed "s/'/'\\\\\\\\''/g"` ;;
    esac
    as_fn_append CONFIG_HEADERS " '$ac_optarg'"
    ac_need_defaults=false;;
  --he | --h)
    # Conflict between --help and --header
    as_fn_error $? "ambiguous option: \`$1'
Try \`$0 --help' for more information.";;
  --help | --hel | -h )
    $as_echo "$ac_cs_usage"; exit ;;
  -q | -quiet | --quiet | --quie | --qui | --qu | --q \
  | -silent | --silent | --silen | --sile | --sil | --si | --s)
    ac_cs_silent=: ;;

  # This is an error.
  -*) as_fn_error $? "unrecognized option: \`$1'
Try \`$0 --help' for more information." ;;

  *) as_fn_append ac_config_targets " $1"
     ac_need_defaults=false ;;

  esac
  shift
done

ac_configure_extra_args=

if $ac_cs_silent; then
  exec 6>/dev/null
  ac_configure_extra_args="$ac_configure_extra_args --silent"
fi

if $ac_cs_recheck; then
  set X '/bin/bash' './configure'  '--with-cards=hda-intel' $ac_configure_extra_args --no-create --no-recursion
  shift
  $as_echo "running CONFIG_SHELL=/bin/bash $*" >&6
  CONFIG_SHELL='/bin/bash'
  export CONFIG_SHELL
  exec "$@"
fi

exec 5>>config.log
{
  echo
  sed 'h;s/./-/g;s/^.../## /;s/...$/ ##/;p;x;p;x' <<_ASBOX
## Running $as_me. ##
_ASBOX
  $as_echo "$ac_log"
} >&5


# Handling of arguments.
for ac_config_target in $ac_config_targets
do
  case $ac_config_target in
    "include/config.h") CONFIG_HEADERS="$CONFIG_HEADERS include/config.h" ;;
    "include/config1.h") CONFIG_HEADERS="$CONFIG_HEADERS include/config1.h" ;;
    "include/version.h") CONFIG_HEADERS="$CONFIG_HEADERS include/version.h" ;;
    "include/autoconf-extra.h") CONFIG_HEADERS="$CONFIG_HEADERS include/autoconf-extra.h" ;;
    "include/alsa-kconfig.h") CONFIG_HEADERS="$CONFIG_HEADERS include/alsa-kconfig.h" ;;
    "version") CONFIG_FILES="$CONFIG_FILES version" ;;
    "Makefile.conf") CONFIG_FILES="$CONFIG_FILES Makefile.conf" ;;
    "snddevices") CONFIG_FILES="$CONFIG_FILES snddevices" ;;
    "utils/alsa-driver.spec") CONFIG_FILES="$CONFIG_FILES utils/alsa-driver.spec" ;;
    "utils/buildrpm") CONFIG_FILES="$CONFIG_FILES utils/buildrpm" ;;
    "toplevel.config") CONFIG_FILES="$CONFIG_FILES toplevel.config" ;;
    "utils/alsasound") CONFIG_FILES="$CONFIG_FILES utils/alsasound" ;;
    "utils/alsasound.posix") CONFIG_FILES="$CONFIG_FILES utils/alsasound.posix" ;;
    "include/pci_ids_compat.h") CONFIG_FILES="$CONFIG_FILES include/pci_ids_compat.h" ;;
    "include/i2c-id_compat.h") CONFIG_FILES="$CONFIG_FILES include/i2c-id_compat.h" ;;

  *) as_fn_error $? "invalid argument: \`$ac_config_target'" "$LINENO" 5;;
  esac
done


# If the user did not use the arguments to specify the items to instantiate,
# then the envvar interface is used.  Set only those that are not.
# We use the long form for the default assignment because of an extremely
# bizarre bug on SunOS 4.1.3.
if $ac_need_defaults; then
  test "${CONFIG_FILES+set}" = set || CONFIG_FILES=$config_files
  test "${CONFIG_HEADERS+set}" = set || CONFIG_HEADERS=$config_headers
fi

# Have a temporary directory for convenience.  Make it in the build tree
# simply because there is no reason against having it here, and in addition,
# creating and moving files from /tmp can sometimes cause problems.
# Hook for its removal unless debugging.
# Note that there is a small window in which the directory will not be cleaned:
# after its creation but before its name has been assigned to `$tmp'.
$debug ||
{
  tmp= ac_tmp=
  trap 'exit_status=$?
  : "${ac_tmp:=$tmp}"
  { test ! -d "$ac_tmp" || rm -fr "$ac_tmp"; } && exit $exit_status
' 0
  trap 'as_fn_exit 1' 1 2 13 15
}
# Create a (secure) tmp directory for tmp files.

{
  tmp=`(umask 077 && mktemp -d "./confXXXXXX") 2>/dev/null` &&
  test -d "$tmp"
}  ||
{
  tmp=./conf$$-$RANDOM
  (umask 077 && mkdir "$tmp")
} || as_fn_error $? "cannot create a temporary directory in ." "$LINENO" 5
ac_tmp=$tmp

# Set up the scripts for CONFIG_FILES section.
# No need to generate them if there are no CONFIG_FILES.
# This happens for instance with `./config.status config.h'.
if test -n "$CONFIG_FILES"; then


ac_cr=`echo X | tr X '\015'`
# On cygwin, bash can eat \r inside `` if the user requested igncr.
# But we know of no other shell where ac_cr would be empty at this
# point, so we can use a bashism as a fallback.
if test "x$ac_cr" = x; then
  eval ac_cr=\$\'\\r\'
fi
ac_cs_awk_cr=`$AWK 'BEGIN { print "a\rb" }' </dev/null 2>/dev/null`
if test "$ac_cs_awk_cr" = "a${ac_cr}b"; then
  ac_cs_awk_cr='\\r'
else
  ac_cs_awk_cr=$ac_cr
fi

echo 'BEGIN {' >"$ac_tmp/subs1.awk" &&
cat >>"$ac_tmp/subs1.awk" <<\_ACAWK &&
S["LTLIBOBJS"]=""
S["LIBOBJS"]=""
S["KERNEL_INC"]="-I/lib/modules/4.18.0-13-generic/build/include -I/lib/modules/4.18.0-13-generic/build/include -I/lib/modules/4.18.0-13-generic/build/include/uapi -I"\
"/lib/modules/4.18.0-13-generic/build/arch/x86/include -I/lib/modules/4.18.0-13-generic/build/include/generated/uapi -I/lib/modules/4.18.0-13-generic"\
"/build/arch/x86/include -I/lib/modules/4.18.0-13-generic/build/arch/x86/include/uapi -I/lib/modules/4.18.0-13-generic/build/arch/x86/include/generat"\
"ed -I/lib/modules/4.18.0-13-generic/build/arch/x86/include/generated/uapi -I/lib/modules/4.18.0-13-generic/build/include/generated/uapi -I/lib/modul"\
"es/4.18.0-13-generic/build/arch/x86/include -I/lib/modules/4.18.0-13-generic/build/arch/x86/include/uapi -I/lib/modules/4.18.0-13-generic/build/arch"\
"/x86/include/generated -I/lib/modules/4.18.0-13-generic/build/arch/x86/include/generated/uapi"
S["EXTRA_INCLUDES"]=""
S["GENKSYMS"]="/sbin/genksyms -k 4.18.0 -p smp_"
S["m_opts"]=""
S["c_opts"]="-O2 -mno-red-zone -mcmodel=kernel -fno-reorder-blocks -fno-strength-reduce -finline-limit=2000 -Wdeclaration-after-statement -Wno-pointer-sign -D__S"\
"MP__ -DCONFIG_SMP -DLINUX"
S["CONFIG_AC97_BUS"]=""
S["CONFIG_SOUND_PRIME"]=""
S["CONFIG_SND_SIMPLE_CARD"]=""
S["CONFIG_SND_SOC_TPA6130A2"]=""
S["CONFIG_SND_SOC_ML26124"]=""
S["CONFIG_SND_SOC_MC13783"]=""
S["CONFIG_SND_SOC_MAX9877"]=""
S["CONFIG_SND_SOC_MAX9768"]=""
S["CONFIG_SND_SOC_LM4857"]=""
S["CONFIG_SND_SOC_WM9713"]=""
S["CONFIG_SND_SOC_WM9712"]=""
S["CONFIG_SND_SOC_WM9705"]=""
S["CONFIG_SND_SOC_WM9090"]=""
S["CONFIG_SND_SOC_WM9081"]=""
S["CONFIG_SND_SOC_WM8996"]=""
S["CONFIG_SND_SOC_WM8995"]=""
S["CONFIG_SND_SOC_WM8994"]=""
S["CONFIG_SND_SOC_WM8993"]=""
S["CONFIG_SND_SOC_WM8991"]=""
S["CONFIG_SND_SOC_WM8990"]=""
S["CONFIG_SND_SOC_WM8988"]=""
S["CONFIG_SND_SOC_WM8985"]=""
S["CONFIG_SND_SOC_WM8983"]=""
S["CONFIG_SND_SOC_WM8978"]=""
S["CONFIG_SND_SOC_WM8974"]=""
S["CONFIG_SND_SOC_WM8971"]=""
S["CONFIG_SND_SOC_WM8962"]=""
S["CONFIG_SND_SOC_WM8961"]=""
S["CONFIG_SND_SOC_WM8960"]=""
S["CONFIG_SND_SOC_WM8955"]=""
S["CONFIG_SND_SOC_WM8940"]=""
S["CONFIG_SND_SOC_WM8904"]=""
S["CONFIG_SND_SOC_WM8903"]=""
S["CONFIG_SND_SOC_WM8900"]=""
S["CONFIG_SND_SOC_WM8804"]=""
S["CONFIG_SND_SOC_WM8782"]=""
S["CONFIG_SND_SOC_WM8776"]=""
S["CONFIG_SND_SOC_WM8770"]=""
S["CONFIG_SND_SOC_WM8753"]=""
S["CONFIG_SND_SOC_WM8750"]=""
S["CONFIG_SND_SOC_WM8741"]=""
S["CONFIG_SND_SOC_WM8737"]=""
S["CONFIG_SND_SOC_WM8731"]=""
S["CONFIG_SND_SOC_WM8728"]=""
S["CONFIG_SND_SOC_WM8727"]=""
S["CONFIG_SND_SOC_WM8711"]=""
S["CONFIG_SND_SOC_WM8580"]=""
S["CONFIG_SND_SOC_WM8523"]=""
S["CONFIG_SND_SOC_WM8510"]=""
S["CONFIG_SND_SOC_WM8400"]=""
S["CONFIG_SND_SOC_WM8350"]=""
S["CONFIG_SND_SOC_WM5110"]=""
S["CONFIG_SND_SOC_WM5102"]=""
S["CONFIG_SND_SOC_WM5100"]=""
S["CONFIG_SND_SOC_WM2200"]=""
S["CONFIG_SND_SOC_WM2000"]=""
S["CONFIG_SND_SOC_WM1250_EV1"]=""
S["CONFIG_SND_SOC_WM0010"]=""
S["CONFIG_SND_SOC_WL1273"]=""
S["CONFIG_SND_SOC_UDA1380"]=""
S["CONFIG_SND_SOC_UDA134X"]=""
S["CONFIG_SND_SOC_TWL6040"]=""
S["CONFIG_MFD_TWL4030_AUDIO"]=""
S["CONFIG_SND_SOC_TWL4030"]=""
S["CONFIG_SND_SOC_TLV320DAC33"]=""
S["CONFIG_SND_SOC_TLV320AIC3X"]=""
S["CONFIG_SND_SOC_TLV320AIC32X4"]=""
S["CONFIG_SND_SOC_TLV320AIC26"]=""
S["CONFIG_SND_SOC_TLV320AIC23"]=""
S["CONFIG_SND_SOC_TAS5086"]=""
S["CONFIG_SND_SOC_STAC9766"]=""
S["CONFIG_SND_SOC_STA529"]=""
S["CONFIG_SND_SOC_STA32X"]=""
S["CONFIG_SND_SOC_SSM2602"]=""
S["CONFIG_SND_SOC_SPDIF"]=""
S["CONFIG_SND_SOC_SN95031"]=""
S["CONFIG_CRC32"]=""
S["CONFIG_SND_SOC_SIGMADSP"]=""
S["CONFIG_SND_SOC_SI476X"]=""
S["CONFIG_SND_SOC_SGTL5000"]=""
S["CONFIG_SND_SOC_RT5631"]=""
S["CONFIG_SND_SOC_PCM3008"]=""
S["CONFIG_SND_SOC_OMAP_HDMI_CODEC"]=""
S["CONFIG_SND_SOC_MAX9850"]=""
S["CONFIG_SND_SOC_MAX98095"]=""
S["CONFIG_SND_SOC_MAX98090"]=""
S["CONFIG_SND_SOC_MAX98088"]=""
S["CONFIG_SND_SOC_LM49453"]=""
S["CONFIG_SND_SOC_ISABELLE"]=""
S["CONFIG_SND_SOC_DMIC"]=""
S["CONFIG_SND_SOC_DFBMCS320"]=""
S["CONFIG_SND_SOC_DA9055"]=""
S["CONFIG_SND_SOC_DA732X"]=""
S["CONFIG_SND_SOC_DA7213"]=""
S["CONFIG_SND_SOC_DA7210"]=""
S["CONFIG_SND_SOC_L3"]=""
S["CONFIG_SND_SOC_JZ4740_CODEC"]=""
S["CONFIG_TTY"]=""
S["CONFIG_SND_SOC_CX20442"]=""
S["CONFIG_SND_SOC_CS4271"]=""
S["CONFIG_SND_SOC_CS4270_VD33_ERRATA"]=""
S["CONFIG_SND_SOC_CS4270"]=""
S["CONFIG_SND_SOC_CS42L73"]=""
S["CONFIG_SND_SOC_CS42L52"]=""
S["CONFIG_SND_SOC_CS42L51"]=""
S["CONFIG_SND_SOC_CQ0093VC"]=""
S["CONFIG_SND_SOC_ALC5632"]=""
S["CONFIG_SND_SOC_ALC5623"]=""
S["CONFIG_SND_SOC_AK5386"]=""
S["CONFIG_SND_SOC_AK4671"]=""
S["CONFIG_SND_SOC_AK4642"]=""
S["CONFIG_SND_SOC_AK4641"]=""
S["CONFIG_SND_SOC_AK4535"]=""
S["CONFIG_SND_SOC_AK4104"]=""
S["CONFIG_SND_SOC_ADS117X"]=""
S["CONFIG_SND_SOC_ADAV80X"]=""
S["CONFIG_SND_SOC_ADAU1373"]=""
S["CONFIG_SND_SOC_ADAU1701"]=""
S["CONFIG_SND_SOC_AD73311"]=""
S["CONFIG_SND_SOC_AD1980"]=""
S["CONFIG_SND_SOC_AD193X"]=""
S["CONFIG_SND_SOC_AD1836"]=""
S["CONFIG_SND_SOC_AC97_CODEC"]=""
S["CONFIG_SND_SOC_AB8500_CODEC"]=""
S["CONFIG_SND_SOC_WM_ADSP"]=""
S["CONFIG_SND_SOC_WM_HUBS"]=""
S["CONFIG_SND_SOC_ARIZONA"]=""
S["CONFIG_SND_SOC_88PM860X"]=""
S["CONFIG_SND_SOC_ALL_CODECS"]=""
S["CONFIG_SND_SOC_I2C_AND_SPI"]=""
S["CONFIG_AB8500_GPADC"]=""
S["CONFIG_AB8500_CORE"]=""
S["CONFIG_SND_SOC_UX500_MACH_MOP500"]=""
S["CONFIG_SND_SOC_UX500_PLAT_DMA"]=""
S["CONFIG_SND_SOC_UX500_PLAT_MSP_I2S"]=""
S["CONFIG_MFD_DB8500_PRCMU"]=""
S["CONFIG_SND_SOC_UX500"]=""
S["CONFIG_SND_SOC_TXX9ACLC_GENERIC"]=""
S["CONFIG_SND_SOC_TXX9ACLC_AC97"]=""
S["CONFIG_TXX9_DMAC"]=""
S["CONFIG_HAS_TXX9_ACLC"]=""
S["CONFIG_SND_SOC_TXX9ACLC"]=""
S["CONFIG_SND_SOC_TEGRA_ALC5632"]=""
S["CONFIG_SND_SOC_TEGRA_TRIMSLICE"]=""
S["CONFIG_SND_SOC_TEGRA_WM9712"]=""
S["CONFIG_SND_SOC_TEGRA_WM8903"]=""
S["CONFIG_SND_SOC_TEGRA_WM8753"]=""
S["CONFIG_SND_SOC_TEGRA30_I2S"]=""
S["CONFIG_ARCH_TEGRA_3X_SOC"]=""
S["CONFIG_SND_SOC_TEGRA30_AHUB"]=""
S["CONFIG_SND_SOC_TEGRA20_SPDIF"]=""
S["CONFIG_SND_SOC_TEGRA20_I2S"]=""
S["CONFIG_SND_SOC_TEGRA20_DAS"]=""
S["CONFIG_ARCH_TEGRA_2X_SOC"]=""
S["CONFIG_SND_SOC_TEGRA20_AC97"]=""
S["CONFIG_REGMAP_MMIO"]=""
S["CONFIG_TEGRA20_APB_DMA"]=""
S["CONFIG_ARCH_TEGRA"]=""
S["CONFIG_SND_SOC_TEGRA"]=""
S["CONFIG_SH_MIGOR"]=""
S["CONFIG_SND_SIU_MIGOR"]=""
S["CONFIG_SND_SH7760_AC97"]=""
S["CONFIG_SH_DMAE"]=""
S["CONFIG_DMADEVICES"]=""
S["CONFIG_DMA_ENGINE"]=""
S["CONFIG_HAVE_CLK"]=""
S["CONFIG_SND_SOC_SH4_SIU"]=""
S["CONFIG_SND_SOC_SH4_FSI"]=""
S["CONFIG_SND_SOC_SH4_SSI"]=""
S["CONFIG_SND_SOC_SH4_HAC"]=""
S["CONFIG_SH_DMABRG"]=""
S["CONFIG_CPU_SUBTYPE_SH7760"]=""
S["CONFIG_SND_SOC_PCM_SH7760"]=""
S["CONFIG_ARCH_SHMOBILE"]=""
S["CONFIG_XTENSA_PLATFORM_S6105"]=""
S["CONFIG_SND_S6000_SOC_S6IPCAM"]=""
S["CONFIG_SND_S6000_SOC_I2S"]=""
S["CONFIG_XTENSA_VARIANT_S6000"]=""
S["CONFIG_SND_S6000_SOC"]=""
S["CONFIG_SND_SOC_LITTLEMILL"]=""
S["CONFIG_SND_SOC_LOWLAND"]=""
S["CONFIG_SND_SOC_BELLS"]=""
S["CONFIG_SND_SOC_TOBERMORY"]=""
S["CONFIG_MACH_WLF_CRAGG_6410"]=""
S["CONFIG_SND_SOC_SPEYSIDE"]=""
S["CONFIG_SND_SOC_SMDK_WM8994_PCM"]=""
S["CONFIG_SND_SOC_SMDK_WM8580_PCM"]=""
S["CONFIG_SND_SOC_SAMSUNG_SMDK_SPDIF"]=""
S["CONFIG_MACH_AQUILA"]=""
S["CONFIG_MACH_GONI"]=""
S["CONFIG_SND_SOC_GONI_AQUILA_WM8994"]=""
S["CONFIG_MACH_SMARTQ"]=""
S["CONFIG_SND_SOC_SMARTQ"]=""
S["CONFIG_MACH_SMDKC210"]=""
S["CONFIG_MACH_SMDKV310"]=""
S["CONFIG_SND_SOC_SAMSUNG_SMDK_WM9713"]=""
S["CONFIG_MACH_RX1950"]=""
S["CONFIG_SND_SOC_SAMSUNG_RX1950_UDA1380"]=""
S["CONFIG_ARCH_H1940"]=""
S["CONFIG_SND_SOC_SAMSUNG_H1940_UDA1380"]=""
S["CONFIG_SND_SOC_SAMSUNG_SIMTEC_HERMES"]=""
S["CONFIG_SND_SOC_SAMSUNG_SIMTEC_TLV320AIC23"]=""
S["CONFIG_SND_SOC_SAMSUNG_SIMTEC"]=""
S["CONFIG_SND_SOC_SAMSUNG_S3C24XX_UDA134X"]=""
S["CONFIG_ARCH_S3C24XX"]=""
S["CONFIG_SND_SOC_SAMSUNG_LN2440SBC_ALC650"]=""
S["CONFIG_MACH_SMDK2443"]=""
S["CONFIG_SND_SOC_SAMSUNG_SMDK2443_WM9710"]=""
S["CONFIG_GENERIC_HARDIRQS"]=""
S["CONFIG_SND_SOC_SAMSUNG_SMDK_WM8994"]=""
S["CONFIG_MACH_SMDKC110"]=""
S["CONFIG_MACH_SMDKV210"]=""
S["CONFIG_MACH_SMDK6450"]=""
S["CONFIG_MACH_SMDK6440"]=""
S["CONFIG_MACH_SMDKC100"]=""
S["CONFIG_MACH_SMDK6410"]=""
S["CONFIG_SND_SOC_SAMSUNG_SMDK_WM8580"]=""
S["CONFIG_MACH_JIVE"]=""
S["CONFIG_SND_SOC_SAMSUNG_JIVE_WM8750"]=""
S["CONFIG_MACH_NEO1973_GTA02"]=""
S["CONFIG_SND_SOC_SAMSUNG_NEO1973_WM8753"]=""
S["CONFIG_SND_SAMSUNG_I2S"]=""
S["CONFIG_SND_SAMSUNG_SPDIF"]=""
S["CONFIG_SND_SAMSUNG_AC97"]=""
S["CONFIG_SND_SAMSUNG_PCM"]=""
S["CONFIG_SND_S3C2412_SOC_I2S"]=""
S["CONFIG_SND_S3C_I2SV2_SOC"]=""
S["CONFIG_SND_S3C24XX_I2S"]=""
S["CONFIG_S3C2410_DMA"]=""
S["CONFIG_S3C64XX_DMA"]=""
S["CONFIG_PLAT_SAMSUNG"]=""
S["CONFIG_SND_SOC_SAMSUNG"]=""
S["CONFIG_MFD_WM8994"]=""
S["CONFIG_MACH_BROWNSTONE"]=""
S["CONFIG_SND_MMP_SOC_BROWNSTONE"]=""
S["CONFIG_SND_PXA2XX_SOC_IMOTE2"]=""
S["CONFIG_MACH_MIOA701"]=""
S["CONFIG_SND_PXA2XX_SOC_MIOA701"]=""
S["CONFIG_MACH_MAGICIAN"]=""
S["CONFIG_SND_PXA2XX_SOC_MAGICIAN"]=""
S["CONFIG_MACH_H4700"]=""
S["CONFIG_SND_PXA2XX_SOC_HX4700"]=""
S["CONFIG_MACH_RAUMFELD_CONNECTOR"]=""
S["CONFIG_MACH_RAUMFELD_SPEAKER"]=""
S["CONFIG_SND_SOC_RAUMFELD"]=""
S["CONFIG_MACH_ZYLONITE"]=""
S["CONFIG_SND_SOC_ZYLONITE"]=""
S["CONFIG_MACH_TTC_DKB"]=""
S["CONFIG_SND_SOC_TTC_DKB"]=""
S["CONFIG_SND_PXA910_SOC"]=""
S["CONFIG_MACH_TAVOREVB3"]=""
S["CONFIG_SND_SOC_TAVOREVB3"]=""
S["CONFIG_MFD_88PM860X"]=""
S["CONFIG_MACH_SAARB"]=""
S["CONFIG_SND_SOC_SAARB"]=""
S["CONFIG_MACH_PALMTE2"]=""
S["CONFIG_MACH_PALMT5"]=""
S["CONFIG_MACH_PALMTX"]=""
S["CONFIG_MACH_PALMLD"]=""
S["CONFIG_SND_PXA2XX_SOC_PALM27X"]=""
S["CONFIG_MACH_CM_X300"]=""
S["CONFIG_MACH_EXEDA"]=""
S["CONFIG_MACH_EM_X270"]=""
S["CONFIG_SND_PXA2XX_SOC_EM_X270"]=""
S["CONFIG_MACH_E800"]=""
S["CONFIG_SND_PXA2XX_SOC_E800"]=""
S["CONFIG_MACH_E750"]=""
S["CONFIG_SND_PXA2XX_SOC_E750"]=""
S["CONFIG_MACH_E740"]=""
S["CONFIG_SND_PXA2XX_SOC_E740"]=""
S["CONFIG_MFD_TC6393XB"]=""
S["CONFIG_MACH_TOSA"]=""
S["CONFIG_SND_PXA2XX_SOC_TOSA"]=""
S["CONFIG_MACH_POODLE"]=""
S["CONFIG_SND_PXA2XX_SOC_POODLE"]=""
S["CONFIG_MACH_ZIPIT2"]=""
S["CONFIG_SND_PXA2XX_SOC_Z2"]=""
S["CONFIG_PXA_SHARP_CXX00"]=""
S["CONFIG_SND_PXA2XX_SOC_SPITZ"]=""
S["CONFIG_PXA_SHARP_C7XX"]=""
S["CONFIG_SND_PXA2XX_SOC_CORGI"]=""
S["CONFIG_SND_MMP_SOC_SSPA"]=""
S["CONFIG_PXA_SSP"]=""
S["CONFIG_SND_PXA_SOC_SSP"]=""
S["CONFIG_SND_PXA2XX_SOC_I2S"]=""
S["CONFIG_SND_PXA2XX_SOC_AC97"]=""
S["CONFIG_ARCH_MMP"]=""
S["CONFIG_SND_MMP_SOC"]=""
S["CONFIG_SND_PXA2XX_SOC"]=""
S["CONFIG_SND_SOC_MXS_SGTL5000"]=""
S["CONFIG_ARCH_MXS"]=""
S["CONFIG_SND_MXS_SOC"]=""
S["CONFIG_SND_SST_PLATFORM"]=""
S["CONFIG_INTEL_SCU_IPC"]=""
S["CONFIG_SND_MFLD_MACHINE"]=""
S["CONFIG_MACH_T5325"]=""
S["CONFIG_SND_KIRKWOOD_SOC_T5325"]=""
S["CONFIG_MACH_OPENRD_ULTIMATE"]=""
S["CONFIG_MACH_OPENRD_CLIENT"]=""
S["CONFIG_SND_KIRKWOOD_SOC_OPENRD"]=""
S["CONFIG_SND_KIRKWOOD_SOC_I2S"]=""
S["CONFIG_ARCH_KIRKWOOD"]=""
S["CONFIG_SND_KIRKWOOD_SOC"]=""
S["CONFIG_MACH_OMAP3_PANDORA"]=""
S["CONFIG_SND_OMAP_SOC_OMAP3_PANDORA"]=""
S["CONFIG_OMAP4_DSS_HDMI_AUDIO"]=""
S["CONFIG_OMAP2_DSS"]=""
S["CONFIG_OMAP4_DSS_HDMI"]=""
S["CONFIG_SND_OMAP_SOC_OMAP_HDMI"]=""
S["CONFIG_ARCH_OMAP4"]=""
S["CONFIG_TWL6040_CORE"]=""
S["CONFIG_SND_OMAP_SOC_OMAP_ABE_TWL6040"]=""
S["CONFIG_TWL4030_CORE"]=""
S["CONFIG_SND_OMAP_SOC_OMAP_TWL4030"]=""
S["CONFIG_MACH_OMAP3517EVM"]=""
S["CONFIG_SND_OMAP_SOC_AM3517EVM"]=""
S["CONFIG_MACH_OMAP_OSK"]=""
S["CONFIG_SND_OMAP_SOC_OSK5912"]=""
S["CONFIG_MACH_AMS_DELTA"]=""
S["CONFIG_SND_OMAP_SOC_AMS_DELTA"]=""
S["CONFIG_MACH_NOKIA_RX51"]=""
S["CONFIG_SND_OMAP_SOC_RX51"]=""
S["CONFIG_OMAP_MUX"]=""
S["CONFIG_MACH_NOKIA_N810"]=""
S["CONFIG_SND_OMAP_SOC_N810"]=""
S["CONFIG_SND_OMAP_SOC_HDMI"]=""
S["CONFIG_SND_OMAP_SOC_MCPDM"]=""
S["CONFIG_SND_OMAP_SOC_MCBSP"]=""
S["CONFIG_SND_OMAP_SOC_DMIC"]=""
S["CONFIG_DMA_OMAP"]=""
S["CONFIG_ARCH_OMAP"]=""
S["CONFIG_SND_OMAP_SOC"]=""
S["CONFIG_SND_SOC_NUC900EVB"]=""
S["CONFIG_SND_SOC_NUC900_AC97"]=""
S["CONFIG_ARCH_W90X900"]=""
S["CONFIG_SND_SOC_NUC900"]=""
S["CONFIG_JZ4740_QI_LB60"]=""
S["CONFIG_SND_JZ4740_SOC_QI_LB60"]=""
S["CONFIG_SND_JZ4740_SOC_I2S"]=""
S["CONFIG_MACH_JZ4740"]=""
S["CONFIG_SND_JZ4740_SOC"]=""
S["CONFIG_MFD_MC13783"]=""
S["CONFIG_SND_SOC_IMX_MC13783"]=""
S["CONFIG_OF"]=""
S["CONFIG_SND_SOC_IMX_SGTL5000"]=""
S["CONFIG_MACH_EUKREA_MBIMXSD51_BASEBOARD"]=""
S["CONFIG_MACH_EUKREA_MBIMXSD35_BASEBOARD"]=""
S["CONFIG_MACH_EUKREA_MBIMXSD25_BASEBOARD"]=""
S["CONFIG_MACH_EUKREA_MBIMX27_BASEBOARD"]=""
S["CONFIG_SND_SOC_EUKREA_TLV320"]=""
S["CONFIG_MACH_PCA100"]=""
S["CONFIG_MACH_PCM043"]=""
S["CONFIG_SND_SOC_PHYCORE_AC97"]=""
S["CONFIG_MACH_IMX27_VISSTRIM_M10"]=""
S["CONFIG_SND_SOC_MX27VIS_AIC32X4"]=""
S["CONFIG_MACH_MX31ADS_WM1133_EV1"]=""
S["CONFIG_SND_MXC_SOC_WM1133_EV1"]=""
S["CONFIG_SND_SOC_IMX_AUDMUX"]=""
S["CONFIG_SND_SOC_IMX_PCM_DMA"]=""
S["CONFIG_FIQ"]=""
S["CONFIG_SND_SOC_IMX_PCM_FIQ"]=""
S["CONFIG_SND_SOC_IMX_PCM"]=""
S["CONFIG_SND_SOC_IMX_SSI"]=""
S["CONFIG_ARCH_MXC"]=""
S["CONFIG_SND_IMX_SOC"]=""
S["CONFIG_PPC_EFIKA"]=""
S["CONFIG_SND_MPC52XX_SOC_EFIKA"]=""
S["CONFIG_PPC_MPC5200_SIMPLE"]=""
S["CONFIG_SND_MPC52XX_SOC_PCM030"]=""
S["CONFIG_SND_SOC_MPC5200_AC97"]=""
S["CONFIG_PPC_BESTCOMM_GEN_BD"]=""
S["CONFIG_PPC_BESTCOMM"]=""
S["CONFIG_SND_SOC_MPC5200_I2S"]=""
S["CONFIG_P1022_RDK"]=""
S["CONFIG_SND_SOC_P1022_RDK"]=""
S["CONFIG_P1022_DS"]=""
S["CONFIG_SND_SOC_P1022_DS"]=""
S["CONFIG_MPC8610_HPCD"]=""
S["CONFIG_SND_SOC_MPC8610_HPCD"]=""
S["CONFIG_SND_SOC_POWERPC_DMA"]=""
S["CONFIG_SND_MPC52XX_DMA"]=""
S["CONFIG_PPC_MPC52XX"]=""
S["CONFIG_FSL_SOC"]=""
S["CONFIG_SND_POWERPC_SOC"]=""
S["CONFIG_SND_SOC_FSL_UTILS"]=""
S["CONFIG_SND_SOC_FSL_SSI"]=""
S["CONFIG_CLKDEV_LOOKUP"]=""
S["CONFIG_SND_DESIGNWARE_I2S"]=""
S["CONFIG_MACH_DAVINCI_DA850_EVM"]=""
S["CONFIG_SND_DA850_SOC_EVM"]=""
S["CONFIG_MACH_DAVINCI_DA830_EVM"]=""
S["CONFIG_SND_DA830_SOC_EVM"]=""
S["CONFIG_SFFSDR_FPGA"]=""
S["CONFIG_MACH_SFFSDR"]=""
S["CONFIG_SND_DAVINCI_SOC_SFFSDR"]=""
S["CONFIG_MACH_DAVINCI_DM6467_EVM"]=""
S["CONFIG_SND_DM6467_SOC_EVM"]=""
S["CONFIG_MFD_DAVINCI_VOICECODEC"]=""
S["CONFIG_SND_DM365_VOICE_CODEC"]=""
S["CONFIG_SND_DM365_AIC3X_CODEC"]=""
S["CONFIG_MACH_DAVINCI_DM365_EVM"]=""
S["CONFIG_MACH_DAVINCI_DM355_EVM"]=""
S["CONFIG_MACH_DAVINCI_EVM"]=""
S["CONFIG_SND_DAVINCI_SOC_EVM"]=""
S["CONFIG_SND_DAVINCI_SOC_VCIF"]=""
S["CONFIG_SND_DAVINCI_SOC_MCASP"]=""
S["CONFIG_SND_DAVINCI_SOC_I2S"]=""
S["CONFIG_ARCH_DAVINCI"]=""
S["CONFIG_SND_DAVINCI_SOC"]=""
S["CONFIG_MACH_EDB9315A"]=""
S["CONFIG_MACH_EDB9307A"]=""
S["CONFIG_MACH_EDB9302A"]=""
S["CONFIG_MACH_EDB9302"]=""
S["CONFIG_MACH_EDB9301"]=""
S["CONFIG_SND_EP93XX_SOC_EDB93XX"]=""
S["CONFIG_MACH_SIM_ONE"]=""
S["CONFIG_SND_EP93XX_SOC_SIMONE"]=""
S["CONFIG_MACH_SNAPPER_CL15"]=""
S["CONFIG_SND_EP93XX_SOC_SNAPPERCL15"]=""
S["CONFIG_SND_EP93XX_SOC_AC97"]=""
S["CONFIG_SND_EP93XX_SOC_I2S"]=""
S["CONFIG_ARCH_EP93XX"]=""
S["CONFIG_SND_EP93XX_SOC"]=""
S["CONFIG_SND_BF5XX_SPORT_NUM"]=""
S["CONFIG_SND_BF5XX_SOC_AC97"]=""
S["CONFIG_SND_BF5XX_SOC_TDM"]=""
S["CONFIG_SND_BF6XX_SOC_I2S"]=""
S["CONFIG_SND_BF5XX_SOC_I2S"]=""
S["CONFIG_SND_BF6XX_SOC_SPORT"]=""
S["CONFIG_SND_BF5XX_SOC_SPORT"]=""
S["CONFIG_SND_BF5XX_SOC_AD1980"]=""
S["CONFIG_SND_BF5XX_RESET_GPIO_NUM"]=""
S["CONFIG_SND_BF5XX_HAVE_COLD_RESET"]=""
S["CONFIG_SND_BF5XX_MULTICHAN_SUPPORT"]=""
S["CONFIG_SND_BF5XX_MMAP_SUPPORT"]=""
S["CONFIG_SND_BF5XX_AC97"]=""
S["CONFIG_SND_BF5XX_SOC_AD193X"]=""
S["CONFIG_SND_BF5XX_SOC_AD1836"]=""
S["CONFIG_SND_BF5XX_TDM"]=""
S["CONFIG_SND_BFIN_AD73311_SE"]=""
S["CONFIG_SND_BF5XX_SOC_AD73311"]=""
S["CONFIG_SND_SOC_BFIN_EVAL_ADAV80X"]=""
S["CONFIG_SND_SOC_BFIN_EVAL_ADAU1373"]=""
S["CONFIG_SND_SOC_BFIN_EVAL_ADAU1701"]=""
S["CONFIG_SPI_MASTER"]=""
S["CONFIG_SND_BF5XX_SOC_SSM2602"]=""
S["CONFIG_BLACKFIN"]=""
S["CONFIG_SND_BF5XX_I2S"]=""
S["CONFIG_SND_SOC_DB1200"]=""
S["CONFIG_SND_SOC_DB1000"]=""
S["CONFIG_SND_SOC_AU1XI2SC"]=""
S["CONFIG_SND_SOC_AU1XAC97C"]=""
S["CONFIG_SND_SOC_AU1XAUDIO"]=""
S["CONFIG_SND_SOC_AU1XPSC_AC97"]=""
S["CONFIG_SND_SOC_AU1XPSC_I2S"]=""
S["CONFIG_SND_SOC_AU1XPSC"]=""
S["CONFIG_MACH_AFEB9260"]=""
S["CONFIG_SND_AT91_SOC_AFEB9260"]=""
S["CONFIG_AT91_PROGRAMMABLE_CLOCKS"]=""
S["CONFIG_SND_AT91_SOC_SAM9G20_WM8731"]=""
S["CONFIG_SND_ATMEL_SOC_SSC"]=""
S["CONFIG_SND_ATMEL_SOC_DMA"]=""
S["CONFIG_SND_ATMEL_SOC_PDC"]=""
S["CONFIG_SND_ATMEL_SOC"]=""
S["CONFIG_SND_SOC_GENERIC_DMAENGINE_PCM"]=""
S["CONFIG_SND_SOC_DMAENGINE_PCM"]=""
S["CONFIG_SND_SOC_AC97_BUS"]=""
S["CONFIG_REGMAP_SPI"]=""
S["CONFIG_REGMAP_I2C"]=""
S["CONFIG_SND_SOC"]=""
S["CONFIG_SND_HARMONY"]=""
S["CONFIG_GSC"]=""
S["CONFIG_SND_GSC"]=""
S["CONFIG_SND_SUN_DBRI"]=""
S["CONFIG_SND_SUN_CS4231"]=""
S["CONFIG_SND_SUN_AMD7930"]=""
S["CONFIG_SPARC"]=""
S["CONFIG_SND_SPARC"]=""
S["CONFIG_SND_PDAUDIOCF"]=""
S["CONFIG_SND_VXPOCKET"]=""
S["CONFIG_SND_PCMCIA"]="y"
S["CONFIG_SND_SCS1X"]=""
S["CONFIG_SND_ISIGHT"]=""
S["CONFIG_SND_FIREWIRE_SPEAKERS"]=""
S["CONFIG_SND_FIREWIRE_LIB"]=""
S["CONFIG_SND_FIREWIRE"]="y"
S["CONFIG_SND_USB_6FIRE"]=""
S["CONFIG_SND_USB_US122L"]=""
S["CONFIG_SND_USB_CAIAQ_INPUT"]=""
S["CONFIG_SND_USB_CAIAQ"]=""
S["CONFIG_SND_USB_USX2Y"]=""
S["CONFIG_SND_USB_UA101"]=""
S["CONFIG_SND_USB_AUDIO"]=""
S["CONFIG_SND_USB"]="y"
S["CONFIG_CPU_SH3"]=""
S["CONFIG_SND_SH_DAC_AUDIO"]=""
S["CONFIG_G2_DMA"]=""
S["CONFIG_SH_DREAMCAST"]=""
S["CONFIG_SND_AICA"]=""
S["CONFIG_SND_SUPERH"]=""
S["CONFIG_MIPS_ALCHEMY"]=""
S["CONFIG_SND_AU1X00"]=""
S["CONFIG_SGI_HAS_HAL2"]=""
S["CONFIG_SND_SGI_HAL2"]=""
S["CONFIG_SGI_IP32"]=""
S["CONFIG_SND_SGI_O2"]=""
S["CONFIG_SND_MIPS"]=""
S["CONFIG_SND_AT73C213_TARGET_BITRATE"]=""
S["CONFIG_ATMEL_SSC"]=""
S["CONFIG_SND_AT73C213"]=""
S["CONFIG_SPI"]=""
S["CONFIG_SND_SPI"]=""
S["CONFIG_SND_ATMEL_AC97C"]=""
S["CONFIG_DW_DMAC"]=""
S["CONFIG_SND_ATMEL_ABDAC"]=""
S["CONFIG_ARCH_AT91"]=""
S["CONFIG_AVR32"]=""
S["CONFIG_SND_PXA2XX_I2SOUND"]=""
S["CONFIG_I2C_SENSOR"]=""
S["CONFIG_ARCH_S3C2410"]=""
S["CONFIG_SND_S3C2410"]=""
S["CONFIG_SND_SA11XX_UDA1341"]=""
S["CONFIG_SND_PXA2XX_AC97"]=""
S["CONFIG_SND_PXA2XX_LIB_AC97"]=""
S["CONFIG_SND_PXA2XX_LIB"]=""
S["CONFIG_SND_PXA2XX_PCM"]=""
S["CONFIG_ARM_AMBA"]=""
S["CONFIG_SND_ARMAACI"]=""
S["CONFIG_SND_ARM"]=""
S["CONFIG_SND_AOA_SOUNDBUS_I2S"]=""
S["CONFIG_SND_AOA_SOUNDBUS"]=""
S["CONFIG_SND_AOA_TOONIE"]=""
S["CONFIG_SND_AOA_TAS"]=""
S["CONFIG_I2C_POWERMAC"]=""
S["CONFIG_SND_AOA_ONYX"]=""
S["CONFIG_SND_AOA_FABRIC_LAYOUT"]=""
S["CONFIG_SND_AOA"]=""
S["CONFIG_SND_PS3_DEFAULT_START_DELAY"]=""
S["CONFIG_PS3_PS3AV"]=""
S["CONFIG_SND_PS3"]=""
S["CONFIG_SND_POWERMAC_AUTO_DRC"]=""
S["CONFIG_PPC_PMAC"]=""
S["CONFIG_SND_POWERMAC"]=""
S["CONFIG_SND_PPC"]=""
S["CONFIG_SND_PDPLUS"]=""
S["CONFIG_SND_YMFPCI"]=""
S["CONFIG_SND_VX222"]=""
S["CONFIG_SND_VIRTUOSO"]=""
S["CONFIG_SND_VIA82XX_MODEM"]=""
S["CONFIG_SND_VIA82XX"]=""
S["CONFIG_SND_TRIDENT"]=""
S["CONFIG_SND_SONICVIBES"]=""
S["CONFIG_SND_SIS7019"]=""
S["CONFIG_SND_RME9652"]=""
S["CONFIG_SND_RME96"]=""
S["CONFIG_SND_RME32"]=""
S["CONFIG_SND_RIPTIDE"]=""
S["CONFIG_SND_PCXHR"]=""
S["CONFIG_SND_NM256"]=""
S["CONFIG_SND_MIXART"]=""
S["CONFIG_SND_MAESTRO3_INPUT"]=""
S["CONFIG_SND_MAESTRO3"]=""
S["CONFIG_SND_LX6464ES"]=""
S["CONFIG_SND_LOLA"]=""
S["CONFIG_SND_KORG1212"]=""
S["CONFIG_SND_INTEL8X0M"]=""
S["CONFIG_SND_INTEL8X0"]=""
S["CONFIG_SND_ICE1724"]=""
S["CONFIG_BITREVERSE"]=""
S["CONFIG_SND_ICE1712"]=""
S["CONFIG_SND_HDSPM"]=""
S["CONFIG_SND_HDSP"]=""
S["CONFIG_SND_HDA_POWER_SAVE_DEFAULT"]="0"
S["CONFIG_SND_HDA_GENERIC"]="y"
S["CONFIG_SND_HDA_CODEC_SI3054"]="y"
S["CONFIG_SND_HDA_CODEC_CMEDIA"]="y"
S["CONFIG_SND_HDA_CODEC_CA0132_DSP"]="y"
S["CONFIG_SND_HDA_CODEC_CA0132"]="y"
S["CONFIG_SND_HDA_CODEC_CA0110"]="y"
S["CONFIG_SND_HDA_CODEC_CONEXANT"]="y"
S["CONFIG_SND_HDA_CODEC_CIRRUS"]="y"
S["CONFIG_SND_HDA_CODEC_HDMI"]="y"
S["CONFIG_SND_HDA_CODEC_VIA"]="y"
S["CONFIG_SND_HDA_CODEC_SIGMATEL"]="y"
S["CONFIG_SND_HDA_CODEC_ANALOG"]="y"
S["CONFIG_SND_HDA_CODEC_REALTEK"]="y"
S["CONFIG_SND_HDA_PATCH_LOADER"]="y"
S["CONFIG_SND_HDA_INPUT_JACK"]="y"
S["CONFIG_SND_HDA_INPUT_BEEP_MODE"]="1"
S["CONFIG_SND_HDA_INPUT_BEEP"]="y"
S["CONFIG_SND_HDA_RECONFIG"]="y"
S["CONFIG_SND_HDA_HWDEP"]="y"
S["CONFIG_SND_HDA_PREALLOC_SIZE"]="64"
S["CONFIG_SND_HDA_DSP_LOADER"]="y"
S["CONFIG_SND_HDA_INTEL"]="m"
S["CONFIG_VIDEO_V4L2"]="y"
S["CONFIG_SND_ES1968_INPUT"]=""
S["CONFIG_SND_ES1938"]=""
S["CONFIG_SND_ENS1371"]=""
S["CONFIG_SND_ENS1370"]=""
S["CONFIG_SND_EMU10K1X"]=""
S["CONFIG_SND_INDIGODJX"]=""
S["CONFIG_SND_INDIGOIOX"]=""
S["CONFIG_SND_INDIGODJ"]=""
S["CONFIG_SND_INDIGOIO"]=""
S["CONFIG_SND_INDIGO"]=""
S["CONFIG_SND_ECHO3G"]=""
S["CONFIG_SND_MIA"]=""
S["CONFIG_SND_MONA"]=""
S["CONFIG_SND_LAYLA24"]=""
S["CONFIG_SND_GINA24"]=""
S["CONFIG_SND_DARLA24"]=""
S["CONFIG_SND_LAYLA20"]=""
S["CONFIG_SND_GINA20"]=""
S["CONFIG_SND_DARLA20"]=""
S["CONFIG_SND_CTXFI"]=""
S["CONFIG_SND_CS5535AUDIO"]=""
S["CONFIG_SND_CS5530"]=""
S["CONFIG_SND_CS46XX_NEW_DSP"]=""
S["CONFIG_SND_CS46XX"]=""
S["CONFIG_SND_CS4281"]=""
S["CONFIG_SND_OXYGEN"]=""
S["CONFIG_SND_OXYGEN_LIB"]=""
S["CONFIG_SND_CMIPCI"]=""
S["CONFIG_SND_CA0106"]=""
S["CONFIG_SND_BT87X_OVERCLOCK"]=""
S["CONFIG_SND_BT87X"]=""
S["CONFIG_SND_AZT3328"]=""
S["CONFIG_SND_AW2"]=""
S["CONFIG_SND_AU8830"]=""
S["CONFIG_SND_AU8820"]=""
S["CONFIG_SND_AU8810"]=""
S["CONFIG_SND_ATIIXP_MODEM"]=""
S["CONFIG_SND_ATIIXP"]=""
S["CONFIG_SND_ASIHPI"]=""
S["CONFIG_SND_ALI5451"]=""
S["CONFIG_SND_ALS4000"]=""
S["CONFIG_SND_ALS300"]=""
S["CONFIG_SND_AD1889"]=""
S["CONFIG_SND_PCI"]="y"
S["CONFIG_SND_ES1968"]=""
S["CONFIG_SND_FM801"]=""
S["CONFIG_RADIO_SHARK"]=""
S["CONFIG_RADIO_MAXIRADIO"]=""
S["CONFIG_RADIO_SF16FMR2"]=""
S["CONFIG_SND_ES1968_RADIO"]=""
S["CONFIG_SND_FM801_TEA575X_BOOL"]=""
S["CONFIG_SND_TEA575X"]=""
S["CONFIG_SND_PC98_CS4232"]=""
S["CONFIG_SND_MSND_CLASSIC"]=""
S["CONFIG_SND_MSND_PINNACLE"]=""
S["CONFIG_SND_WAVEFRONT"]=""
S["CONFIG_SND_SSCAPE"]=""
S["CONFIG_SND_SB16_CSP"]=""
S["CONFIG_SND_SB16"]=""
S["CONFIG_SND_SB8"]=""
S["CONFIG_SND_MIRO"]=""
S["CONFIG_SND_OPTI93X"]=""
S["CONFIG_SND_OPTI92X_CS4231"]=""
S["CONFIG_SND_OPTI92X_AD1848"]=""
S["CONFIG_SND_OPL3SA2"]=""
S["CONFIG_SND_JAZZ16"]=""
S["CONFIG_SND_INTERWAVE_STB"]=""
S["CONFIG_SND_INTERWAVE"]=""
S["CONFIG_SND_GUSMAX"]=""
S["CONFIG_SND_GUSEXTREME"]=""
S["CONFIG_SND_GUSCLASSIC"]=""
S["CONFIG_HAS_IOPORT"]=""
S["CONFIG_SND_SC6000"]=""
S["CONFIG_SND_ES18XX"]=""
S["CONFIG_SND_ES1688"]=""
S["CONFIG_SND_CS4236"]=""
S["CONFIG_SND_CS4231"]=""
S["CONFIG_SND_CMI8330"]=""
S["CONFIG_SND_CMI8328"]=""
S["CONFIG_SND_AZT2320"]=""
S["CONFIG_SND_AZT2316"]=""
S["CONFIG_SND_AZT1605"]=""
S["CONFIG_SND_ALS100"]=""
S["CONFIG_SND_AD1848"]=""
S["CONFIG_SND_AD1816A"]=""
S["CONFIG_SND_ADLIB"]=""
S["CONFIG_SND_ISA"]=""
S["CONFIG_SND_SB16_DSP"]=""
S["CONFIG_SND_SB8_DSP"]=""
S["CONFIG_SND_SB_COMMON"]=""
S["CONFIG_SND_WSS_LIB"]=""
S["CONFIG_SND_LOOPBACK"]=""
S["CONFIG_SND_SERIALMIDI"]=""
S["CONFIG_SND_AC97_POWER_SAVE_DEFAULT"]=""
S["CONFIG_SND_AC97_POWER_SAVE"]=""
S["CONFIG_XILINX_VIRTEX"]=""
S["CONFIG_SND_ML403_AC97CR"]=""
S["CONFIG_SND_PORTMAN2X4"]=""
S["CONFIG_SND_MPU401"]=""
S["CONFIG_SND_SERIAL_U16550"]=""
S["CONFIG_SND_MTS64"]=""
S["CONFIG_SND_MTPAV"]=""
S["CONFIG_SND_VIRMIDI"]=""
S["CONFIG_SND_ALOOP"]=""
S["CONFIG_SND_DUMMY"]=""
S["CONFIG_PCSPKR_PLATFORM"]="y"
S["CONFIG_SND_PCSP"]=""
S["CONFIG_SND_DRIVERS"]="y"
S["CONFIG_SND_AC97_CODEC"]=""
S["CONFIG_SND_VX_LIB"]=""
S["CONFIG_SND_MPU401_UART"]=""
S["CONFIG_BROKEN"]=""
S["CONFIG_SND_HPET"]=""
S["CONFIG_SND_DEBUG_MEMORY"]=""
S["CONFIG_SND_EMU10K1"]=""
S["CONFIG_SND_EMU10K1_SEQ"]=""
S["CONFIG_SND_SBAWE"]=""
S["CONFIG_SND_SBAWE_SEQ"]=""
S["CONFIG_SND_OPL4_LIB"]=""
S["CONFIG_SND_OPL4_LIB_SEQ"]=""
S["CONFIG_SND_OPL3_LIB"]=""
S["CONFIG_SND_OPL3_LIB_SEQ"]=""
S["CONFIG_SND_RAWMIDI_SEQ"]=""
S["CONFIG_SND_DMA_SGBUF"]="y"
S["CONFIG_SND_KCTL_JACK"]="y"
S["CONFIG_SND_VMASTER"]="y"
S["CONFIG_SND_PCM_XRUN_DEBUG"]=""
S["CONFIG_SND_DEBUG_VERBOSE"]=""
S["CONFIG_SND_DEBUG"]=""
S["CONFIG_SND_VERBOSE_PRINTK"]="y"
S["CONFIG_SND_VERBOSE_PROCFS"]="y"
S["CONFIG_SND_SUPPORT_OLD_API"]="y"
S["CONFIG_SND_MAX_CARDS"]=""
S["CONFIG_SND_DYNAMIC_MINORS"]=""
S["CONFIG_SND_SEQ_RTCTIMER_DEFAULT"]=""
S["CONFIG_SND_RTCTIMER"]=""
S["CONFIG_SND_SEQ_HRTIMER_DEFAULT"]=""
S["CONFIG_SND_HRTIMER"]=""
S["CONFIG_SND_SEQUENCER_OSS"]="y"
S["CONFIG_SND_PCM_OSS_PLUGINS"]="y"
S["CONFIG_SND_PCM_OSS"]="m"
S["CONFIG_SND_MIXER_OSS"]="m"
S["CONFIG_SND_OSSEMUL"]="y"
S["CONFIG_SND_SEQ_DUMMY"]=""
S["CONFIG_SND_SEQUENCER"]="m"
S["CONFIG_SND_JACK"]="y"
S["CONFIG_SND_COMPRESS_OFFLOAD"]=""
S["CONFIG_SND_RAWMIDI"]=""
S["CONFIG_SND_HWDEP"]="m"
S["CONFIG_SND_PCM"]="m"
S["CONFIG_SND_TIMER"]="m"
S["CONFIG_SND"]="m"
S["CONFIG_UML"]=""
S["CONFIG_M68K"]=""
S["CONFIG_SOUND_OSS_CORE_PRECLAIM"]=""
S["CONFIG_SOUND_OSS_CORE"]="y"
S["CONFIG_HAS_IOMEM"]=""
S["CONFIG_SOUND"]="m"
S["CONFIG_FIREWIRE"]="y"
S["CONFIG_HAS_DMA"]="y"
S["CONFIG_PM"]="y"
S["CONFIG_PARPORT"]="y"
S["CONFIG_X86_PC9800"]=""
S["CONFIG_PCMCIA"]="y"
S["CONFIG_HIGH_RES_TIMERS"]="y"
S["CONFIG_X86_PC"]=""
S["CONFIG_SND_BIT32_EMUL"]=""
S["CONFIG_USB"]="y"
S["CONFIG_PROC_FS"]="y"
S["CONFIG_HPET"]="y"
S["CONFIG_RTC"]=""
S["CONFIG_SND_VERSION"]="1.0.2x-130606-v5.18rc8"
S["CONFIG_PNP"]=""
S["CONFIG_ISAPNP"]=""
S["CONFIG_PNP_KERNEL"]="y"
S["CONFIG_ISAPNP_KERNEL"]="y"
S["CONFIG_VIDEO_DEV"]="y"
S["msmp"]="1"
S["CONFIG_INPUT"]="y"
S["CONFIG_FW_LOADER"]="y"
S["CONFIG_I2C"]="y"
S["CONFIG_PCI"]="y"
S["CONFIG_SND_MVERSION"]=""
S["CONFIG_SUPERH64"]=""
S["CONFIG_SUPERH"]=""
S["CONFIG_PARISC"]=""
S["CONFIG_ISA_DMA_API"]="y"
S["CONFIG_ISA"]=""
S["CONFIG_MIPS"]=""
S["CONFIG_SBUS"]=""
S["CONFIG_SPARC64"]=""
S["CONFIG_SPARC32"]=""
S["CONFIG_PPC"]=""
S["CONFIG_ARCH_PXA"]=""
S["CONFIG_ARCH_SA1100"]=""
S["CONFIG_ARM"]=""
S["CONFIG_L3"]=""
S["CONFIG_ALPHA"]=""
S["CONFIG_X86_64"]="y"
S["CONFIG_X86_32"]=""
S["CONFIG_X86"]="y"
S["KLD"]="ld -m elf_x86_64 -e stext"
S["ARCH"]="x86_64"
S["processor"]="x86_64"
S["CONFIG_SGI"]=""
S["moddir_tree"]="y"
S["modsubdir"]="kernel/sound"
S["moddir"]="/lib/modules/4.18.0-13-generic/kernel/sound"
S["CONFIG_EXPERIMENTAL"]="y"
S["MAKE_ADDS"]=""
S["CONFIG_SND_KERNELBUILD"]="/lib/modules/4.18.0-13-generic/build"
S["CONFIG_SND_KERNELDIR"]="/lib/modules/4.18.0-13-generic/build"
S["NEW_KBUILD"]="y"
S["kextraversion"]="-13-generic"
S["ksublevel"]="0"
S["kpatchlevel"]="18"
S["kversion"]="4"
S["kaversion"]="4.18.0-13-generic"
S["ALSAKERNELDIR"]="/home/harrison/gits/realtek-alc888-patched/Rt-Linux-HDaudio-5.18/alsa-driver-RTv5.18"
S["CROSS_COMPILE"]=""
S["SRCDIR"]="/home/harrison/gits/realtek-alc888-patched/Rt-Linux-HDaudio-5.18/alsa-driver-RTv5.18/alsa"
S["EGREP"]="/bin/grep -E"
S["GREP"]="/bin/grep"
S["CPP"]="gcc -E"
S["AS"]="as"
S["AR"]="ar"
S["INSTALL_DATA"]="${INSTALL} -m 644"
S["INSTALL_SCRIPT"]="${INSTALL}"
S["INSTALL_PROGRAM"]="${INSTALL}"
S["RANLIB"]="ranlib"
S["OBJEXT"]="o"
S["EXEEXT"]=""
S["ac_ct_CC"]="gcc"
S["CPPFLAGS"]=""
S["LDFLAGS"]=""
S["CFLAGS"]="-g -O2"
S["CC"]="gcc"
S["target_alias"]=""
S["host_alias"]=""
S["build_alias"]=""
S["LIBS"]=""
S["ECHO_T"]=""
S["ECHO_N"]="-n"
S["ECHO_C"]=""
S["DEFS"]="-DHAVE_CONFIG_H"
S["mandir"]="${datarootdir}/man"
S["localedir"]="${datarootdir}/locale"
S["libdir"]="${exec_prefix}/lib"
S["psdir"]="${docdir}"
S["pdfdir"]="${docdir}"
S["dvidir"]="${docdir}"
S["htmldir"]="${docdir}"
S["infodir"]="${datarootdir}/info"
S["docdir"]="${datarootdir}/doc/${PACKAGE}"
S["oldincludedir"]="/usr/include"
S["includedir"]="${prefix}/include"
S["localstatedir"]="${prefix}/var"
S["sharedstatedir"]="${prefix}/com"
S["sysconfdir"]="${prefix}/etc"
S["datadir"]="${datarootdir}"
S["datarootdir"]="${prefix}/share"
S["libexecdir"]="${exec_prefix}/libexec"
S["sbindir"]="${exec_prefix}/sbin"
S["bindir"]="${exec_prefix}/bin"
S["program_transform_name"]="s,x,x,"
S["prefix"]="/usr"
S["exec_prefix"]="${prefix}"
S["PACKAGE_URL"]=""
S["PACKAGE_BUGREPORT"]=""
S["PACKAGE_STRING"]=""
S["PACKAGE_VERSION"]=""
S["PACKAGE_TARNAME"]=""
S["PACKAGE_NAME"]=""
S["PATH_SEPARATOR"]=":"
S["SHELL"]="/bin/bash"
_ACAWK
cat >>"$ac_tmp/subs1.awk" <<_ACAWK &&
  for (key in S) S_is_set[key] = 1
  FS = ""

}
{
  line = $ 0
  nfields = split(line, field, "@")
  substed = 0
  len = length(field[1])
  for (i = 2; i < nfields; i++) {
    key = field[i]
    keylen = length(key)
    if (S_is_set[key]) {
      value = S[key]
      line = substr(line, 1, len) "" value "" substr(line, len + keylen + 3)
      len += length(value) + length(field[++i])
      substed = 1
    } else
      len += 1 + keylen
  }

  print line
}

_ACAWK
if sed "s/$ac_cr//" < /dev/null > /dev/null 2>&1; then
  sed "s/$ac_cr\$//; s/$ac_cr/$ac_cs_awk_cr/g"
else
  cat
fi < "$ac_tmp/subs1.awk" > "$ac_tmp/subs.awk" \
  || as_fn_error $? "could not setup config files machinery" "$LINENO" 5
fi # test -n "$CONFIG_FILES"

# Set up the scripts for CONFIG_HEADERS section.
# No need to generate them if there are no CONFIG_HEADERS.
# This happens for instance with `./config.status Makefile'.
if test -n "$CONFIG_HEADERS"; then
cat >"$ac_tmp/defines.awk" <<\_ACAWK ||
BEGIN {
D["PACKAGE_NAME"]=" \"\""
D["PACKAGE_TARNAME"]=" \"\""
D["PACKAGE_VERSION"]=" \"\""
D["PACKAGE_STRING"]=" \"\""
D["PACKAGE_BUGREPORT"]=" \"\""
D["PACKAGE_URL"]=" \"\""
D["STDC_HEADERS"]=" 1"
D["TIME_WITH_SYS_TIME"]=" 1"
D["CONFIG_SND_MODULE"]=" 1"
D["CONFIG_SND_KERNELDIR"]=" \"/lib/modules/4.18.0-13-generic/build\""
D["CONFIG_SND_VERBOSE_PROCFS"]=" 1"
D["CONFIG_SND_VERBOSE_PRINTK"]=" 1"
D["CONFIG_HAVE_GENERATED_AUTOCONF_H"]=" 1"
D["CONFIG_HAVE_DUMP_STACK"]=" 1"
D["CONFIG_ISAPNP_KERNEL"]=" 1"
D["CONFIG_PNP_KERNEL"]=" 1"
D["CONFIG_HAVE_STRLCPY"]=" 1"
D["CONFIG_HAVE_SNPRINTF"]=" 1"
D["CONFIG_HAVE_VSNPRINTF"]=" 1"
D["CONFIG_HAVE_SCNPRINTF"]=" 1"
D["CONFIG_HAVE_SSCANF"]=" 1"
D["CONFIG_HAVE_VMALLOC_TO_PAGE"]=" 1"
D["CONFIG_HAVE_VZALLOC"]=" 1"
D["CONFIG_HAVE_DIV_U64"]=" 1"
D["CONFIG_HAVE_DEV_NAME"]=" 1"
D["CONFIG_HAVE_DEV_SET_NAME"]=" 1"
D["CONFIG_HAVE_PUT_PID"]=" 1"
D["CONFIG_HAVE_PID_VNR"]=" 1"
D["CONFIG_HAVE_PCI_CONSISTENT_DMA_MASK"]=" 1"
D["CONFIG_HAVE_PCI_DEV_PRESENT"]=" 1"
D["CONFIG_HAVE_MSLEEP"]=" 1"
D["CONFIG_HAVE_MSLEEP_INTERRUPTIBLE"]=" 1"
D["CONFIG_HAVE_MSECS_TO_JIFFIES"]=" 1"
D["CONFIG_HAVE_TTY_COUNT_ATOMIC"]=" 1"
D["CONFIG_HAVE_VIDEO_DRVDATA"]=" 1"
D["CONFIG_HAVE_V4L2_CTRLS"]=" 1"
D["CONFIG_HAVE_IO_REMAP_PFN_RANGE"]=" 1"
D["CONFIG_HAVE_KCALLOC"]=" 1"
D["CONFIG_HAVE_KSTRDUP"]=" 1"
D["CONFIG_HAVE_KSTRNDUP"]=" 1"
D["CONFIG_HAVE_KZALLOC"]=" 1"
D["CONFIG_HAVE_PCI_IOREMAP_BAR"]=" 1"
D["CONFIG_HAVE_REGISTER_SOUND_SPECIAL_DEVICE"]=" 1"
D["CONFIG_SND_VERSION"]=" \"1.0.2x-130606-v5.18rc8\""
D["CONFIG_SND_HAVE_USB_ALLOC_COHERENT"]=" 1"
D["CONFIG_HAVE_VM_IOMAP_MEMORY"]=" 1"
D["CONFIG_SND_NEW_IRQ_HANDLER"]=" 1"
D["CONFIG_HAVE_GFP_T"]=" 1"
D["CONFIG_HAVE_GFP_DMA32"]=" 1"
D["CONFIG_HAVE_PAGE_TO_PFN"]=" 1"
D["CONFIG_HAVE_INIT_UTSNAME"]=" 1"
D["CONFIG_HAVE_IS_POWER_OF_2"]=" 1"
D["CONFIG_HAVE_FFS"]=" 1"
D["CONFIG_HAVE_PNP_SUSPEND"]=" 1"
D["CONFIG_SND_HAVE_PM_QOS_REQUEST"]=" 1"
D["CONFIG_SND_HAVE_NEW_IOCTL"]=" 1"
D["CONFIG_SND_HAS_BUILTIN_BOOL"]=" 1"
D["CONFIG_SOUND_MODULE"]=" 1"
D["CONFIG_SOUND_OSS_CORE"]=" 1"
D["CONFIG_SND_MODULE"]=" 1"
D["CONFIG_SND_TIMER_MODULE"]=" 1"
D["CONFIG_SND_PCM_MODULE"]=" 1"
D["CONFIG_SND_HWDEP_MODULE"]=" 1"
D["CONFIG_SND_JACK"]=" 1"
D["CONFIG_SND_SEQUENCER_MODULE"]=" 1"
D["CONFIG_SND_OSSEMUL"]=" 1"
D["CONFIG_SND_MIXER_OSS_MODULE"]=" 1"
D["CONFIG_SND_PCM_OSS_MODULE"]=" 1"
D["CONFIG_SND_PCM_OSS_PLUGINS"]=" 1"
D["CONFIG_SND_SEQUENCER_OSS"]=" 1"
D["CONFIG_SND_SUPPORT_OLD_API"]=" 1"
D["CONFIG_SND_VERBOSE_PROCFS"]=" 1"
D["CONFIG_SND_VERBOSE_PRINTK"]=" 1"
D["CONFIG_SND_VMASTER"]=" 1"
D["CONFIG_SND_KCTL_JACK"]=" 1"
D["CONFIG_SND_DMA_SGBUF"]=" 1"
D["CONFIG_SND_DRIVERS"]=" 1"
D["CONFIG_SND_PCI"]=" 1"
D["CONFIG_SND_HDA_INTEL_MODULE"]=" 1"
D["CONFIG_SND_HDA_DSP_LOADER"]=" 1"
D["CONFIG_SND_HDA_PREALLOC_SIZE"]=" 64"
D["CONFIG_SND_HDA_HWDEP"]=" 1"
D["CONFIG_SND_HDA_RECONFIG"]=" 1"
D["CONFIG_SND_HDA_INPUT_BEEP"]=" 1"
D["CONFIG_SND_HDA_INPUT_BEEP_MODE"]=" 1"
D["CONFIG_SND_HDA_INPUT_JACK"]=" 1"
D["CONFIG_SND_HDA_PATCH_LOADER"]=" 1"
D["CONFIG_SND_HDA_CODEC_REALTEK"]=" 1"
D["CONFIG_SND_HDA_CODEC_ANALOG"]=" 1"
D["CONFIG_SND_HDA_CODEC_SIGMATEL"]=" 1"
D["CONFIG_SND_HDA_CODEC_VIA"]=" 1"
D["CONFIG_SND_HDA_CODEC_HDMI"]=" 1"
D["CONFIG_SND_HDA_CODEC_CIRRUS"]=" 1"
D["CONFIG_SND_HDA_CODEC_CONEXANT"]=" 1"
D["CONFIG_SND_HDA_CODEC_CA0110"]=" 1"
D["CONFIG_SND_HDA_CODEC_CA0132"]=" 1"
D["CONFIG_SND_HDA_CODEC_CA0132_DSP"]=" 1"
D["CONFIG_SND_HDA_CODEC_CMEDIA"]=" 1"
D["CONFIG_SND_HDA_CODEC_SI3054"]=" 1"
D["CONFIG_SND_HDA_GENERIC"]=" 1"
D["CONFIG_SND_HDA_POWER_SAVE_DEFAULT"]=" 0"
D["CONFIG_SND_USB"]=" 1"
D["CONFIG_SND_FIREWIRE"]=" 1"
D["CONFIG_SND_PCMCIA"]=" 1"
  for (key in D) D_is_set[key] = 1
  FS = ""
}
/^[\t ]*#[\t ]*(define|undef)[\t ]+[_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ][_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789]*([\t (]|$)/ {
  line = $ 0
  split(line, arg, " ")
  if (arg[1] == "#") {
    defundef = arg[2]
    mac1 = arg[3]
  } else {
    defundef = substr(arg[1], 2)
    mac1 = arg[2]
  }
  split(mac1, mac2, "(") #)
  macro = mac2[1]
  prefix = substr(line, 1, index(line, defundef) - 1)
  if (D_is_set[macro]) {
    # Preserve the white space surrounding the "#".
    print prefix "define", macro P[macro] D[macro]
    next
  } else {
    # Replace #undef with comments.  This is necessary, for example,
    # in the case of _POSIX_SOURCE, which is predefined and required
    # on some systems where configure will not decide to define it.
    if (defundef == "undef") {
      print "/*", prefix defundef, macro, "*/"
      next
    }
  }
}
{ print }
_ACAWK
  as_fn_error $? "could not setup config headers machinery" "$LINENO" 5
fi # test -n "$CONFIG_HEADERS"


eval set X "  :F $CONFIG_FILES  :H $CONFIG_HEADERS    "
shift
for ac_tag
do
  case $ac_tag in
  :[FHLC]) ac_mode=$ac_tag; continue;;
  esac
  case $ac_mode$ac_tag in
  :[FHL]*:*);;
  :L* | :C*:*) as_fn_error $? "invalid tag \`$ac_tag'" "$LINENO" 5;;
  :[FH]-) ac_tag=-:-;;
  :[FH]*) ac_tag=$ac_tag:$ac_tag.in;;
  esac
  ac_save_IFS=$IFS
  IFS=:
  set x $ac_tag
  IFS=$ac_save_IFS
  shift
  ac_file=$1
  shift

  case $ac_mode in
  :L) ac_source=$1;;
  :[FH])
    ac_file_inputs=
    for ac_f
    do
      case $ac_f in
      -) ac_f="$ac_tmp/stdin";;
      *) # Look for the file first in the build tree, then in the source tree
	 # (if the path is not absolute).  The absolute path cannot be DOS-style,
	 # because $ac_f cannot contain `:'.
	 test -f "$ac_f" ||
	   case $ac_f in
	   [\\/$]*) false;;
	   *) test -f "$srcdir/$ac_f" && ac_f="$srcdir/$ac_f";;
	   esac ||
	   as_fn_error 1 "cannot find input file: \`$ac_f'" "$LINENO" 5;;
      esac
      case $ac_f in *\'*) ac_f=`$as_echo "$ac_f" | sed "s/'/'\\\\\\\\''/g"`;; esac
      as_fn_append ac_file_inputs " '$ac_f'"
    done

    # Let's still pretend it is `configure' which instantiates (i.e., don't
    # use $as_me), people would be surprised to read:
    #    /* config.h.  Generated by config.status.  */
    configure_input='Generated from '`
	  $as_echo "$*" | sed 's|^[^:]*/||;s|:[^:]*/|, |g'
	`' by configure.'
    if test x"$ac_file" != x-; then
      configure_input="$ac_file.  $configure_input"
      { $as_echo "$as_me:${as_lineno-$LINENO}: creating $ac_file" >&5
$as_echo "$as_me: creating $ac_file" >&6;}
    fi
    # Neutralize special characters interpreted by sed in replacement strings.
    case $configure_input in #(
    *\&* | *\|* | *\\* )
       ac_sed_conf_input=`$as_echo "$configure_input" |
       sed 's/[\\\\&|]/\\\\&/g'`;; #(
    *) ac_sed_conf_input=$configure_input;;
    esac

    case $ac_tag in
    *:-:* | *:-) cat >"$ac_tmp/stdin" \
      || as_fn_error $? "could not create $ac_file" "$LINENO" 5 ;;
    esac
    ;;
  esac

  ac_dir=`$as_dirname -- "$ac_file" ||
$as_expr X"$ac_file" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
	 X"$ac_file" : 'X\(//\)[^/]' \| \
	 X"$ac_file" : 'X\(//\)$' \| \
	 X"$ac_file" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X"$ac_file" |
    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)[^/].*/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`
  as_dir="$ac_dir"; as_fn_mkdir_p
  ac_builddir=.

case "$ac_dir" in
.) ac_dir_suffix= ac_top_builddir_sub=. ac_top_build_prefix= ;;
*)
  ac_dir_suffix=/`$as_echo "$ac_dir" | sed 's|^\.[\\/]||'`
  # A ".." for each directory in $ac_dir_suffix.
  ac_top_builddir_sub=`$as_echo "$ac_dir_suffix" | sed 's|/[^\\/]*|/..|g;s|/||'`
  case $ac_top_builddir_sub in
  "") ac_top_builddir_sub=. ac_top_build_prefix= ;;
  *)  ac_top_build_prefix=$ac_top_builddir_sub/ ;;
  esac ;;
esac
ac_abs_top_builddir=$ac_pwd
ac_abs_builddir=$ac_pwd$ac_dir_suffix
# for backward compatibility:
ac_top_builddir=$ac_top_build_prefix

case $srcdir in
  .)  # We are building in place.
    ac_srcdir=.
    ac_top_srcdir=$ac_top_builddir_sub
    ac_abs_top_srcdir=$ac_pwd ;;
  [\\/]* | ?:[\\/]* )  # Absolute name.
    ac_srcdir=$srcdir$ac_dir_suffix;
    ac_top_srcdir=$srcdir
    ac_abs_top_srcdir=$srcdir ;;
  *) # Relative name.
    ac_srcdir=$ac_top_build_prefix$srcdir$ac_dir_suffix
    ac_top_srcdir=$ac_top_build_prefix$srcdir
    ac_abs_top_srcdir=$ac_pwd/$srcdir ;;
esac
ac_abs_srcdir=$ac_abs_top_srcdir$ac_dir_suffix


  case $ac_mode in
  :F)
  #
  # CONFIG_FILE
  #

  case $INSTALL in
  [\\/$]* | ?:[\\/]* ) ac_INSTALL=$INSTALL ;;
  *) ac_INSTALL=$ac_top_build_prefix$INSTALL ;;
  esac
# If the template does not know about datarootdir, expand it.
# FIXME: This hack should be removed a few years after 2.60.
ac_datarootdir_hack=; ac_datarootdir_seen=
ac_sed_dataroot='
/datarootdir/ {
  p
  q
}
/@datadir@/p
/@docdir@/p
/@infodir@/p
/@localedir@/p
/@mandir@/p'
case `eval "sed -n \"\$ac_sed_dataroot\" $ac_file_inputs"` in
*datarootdir*) ac_datarootdir_seen=yes;;
*@datadir@*|*@docdir@*|*@infodir@*|*@localedir@*|*@mandir@*)
  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: $ac_file_inputs seems to ignore the --datarootdir setting" >&5
$as_echo "$as_me: WARNING: $ac_file_inputs seems to ignore the --datarootdir setting" >&2;}
  ac_datarootdir_hack='
  s&@datadir@&${datarootdir}&g
  s&@docdir@&${datarootdir}/doc/${PACKAGE}&g
  s&@infodir@&${datarootdir}/info&g
  s&@localedir@&${datarootdir}/locale&g
  s&@mandir@&${datarootdir}/man&g
  s&\${datarootdir}&${prefix}/share&g' ;;
esac
ac_sed_extra="/^[	 ]*VPATH[	 ]*=[	 ]*/{
h
s///
s/^/:/
s/[	 ]*$/:/
s/:\$(srcdir):/:/g
s/:\${srcdir}:/:/g
s/:@srcdir@:/:/g
s/^:*//
s/:*$//
x
s/\(=[	 ]*\).*/\1/
G
s/\n//
s/^[^=]*=[	 ]*$//
}

:t
/@[a-zA-Z_][a-zA-Z_0-9]*@/!b
s|@configure_input@|$ac_sed_conf_input|;t t
s&@top_builddir@&$ac_top_builddir_sub&;t t
s&@top_build_prefix@&$ac_top_build_prefix&;t t
s&@srcdir@&$ac_srcdir&;t t
s&@abs_srcdir@&$ac_abs_srcdir&;t t
s&@top_srcdir@&$ac_top_srcdir&;t t
s&@abs_top_srcdir@&$ac_abs_top_srcdir&;t t
s&@builddir@&$ac_builddir&;t t
s&@abs_builddir@&$ac_abs_builddir&;t t
s&@abs_top_builddir@&$ac_abs_top_builddir&;t t
s&@INSTALL@&$ac_INSTALL&;t t
$ac_datarootdir_hack
"
eval sed \"\$ac_sed_extra\" "$ac_file_inputs" | $AWK -f "$ac_tmp/subs.awk" \
  >$ac_tmp/out || as_fn_error $? "could not create $ac_file" "$LINENO" 5

test -z "$ac_datarootdir_hack$ac_datarootdir_seen" &&
  { ac_out=`sed -n '/\${datarootdir}/p' "$ac_tmp/out"`; test -n "$ac_out"; } &&
  { ac_out=`sed -n '/^[	 ]*datarootdir[	 ]*:*=/p' \
      "$ac_tmp/out"`; test -z "$ac_out"; } &&
  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: $ac_file contains a reference to the variable \`datarootdir'
which seems to be undefined.  Please make sure it is defined" >&5
$as_echo "$as_me: WARNING: $ac_file contains a reference to the variable \`datarootdir'
which seems to be undefined.  Please make sure it is defined" >&2;}

  rm -f "$ac_tmp/stdin"
  case $ac_file in
  -) cat "$ac_tmp/out" && rm -f "$ac_tmp/out";;
  *) rm -f "$ac_file" && mv "$ac_tmp/out" "$ac_file";;
  esac \
  || as_fn_error $? "could not create $ac_file" "$LINENO" 5
 ;;
  :H)
  #
  # CONFIG_HEADER
  #
  if test x"$ac_file" != x-; then
    {
      $as_echo "/* $configure_input  */" \
      && eval '$AWK -f "$ac_tmp/defines.awk"' "$ac_file_inputs"
    } >"$ac_tmp/config.h" \
      || as_fn_error $? "could not create $ac_file" "$LINENO" 5
    if diff "$ac_file" "$ac_tmp/config.h" >/dev/null 2>&1; then
      { $as_echo "$as_me:${as_lineno-$LINENO}: $ac_file is unchanged" >&5
$as_echo "$as_me: $ac_file is unchanged" >&6;}
    else
      rm -f "$ac_file"
      mv "$ac_tmp/config.h" "$ac_file" \
	|| as_fn_error $? "could not create $ac_file" "$LINENO" 5
    fi
  else
    $as_echo "/* $configure_input  */" \
      && eval '$AWK -f "$ac_tmp/defines.awk"' "$ac_file_inputs" \
      || as_fn_error $? "could not create -" "$LINENO" 5
  fi
 ;;


  esac

done # for ac_tag


as_fn_exit 0
